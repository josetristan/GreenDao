package com.jtristan.greendao.dao;

import com.jtristan.greendao.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table CONDICION_PAGO_DE_UN_PEDIDO.
 */
public class CondicionPagoDeUnPedido {

    private long idPedido;
    private long idCondicion;

    /** Used to resolve relations */
    private DaoSession daoSession;

    /** Used for active entity operations. */
    private CondicionPagoDeUnPedidoDao myDao;

    private CondicionPago condicionPago;
    private Long condicionPago__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public CondicionPagoDeUnPedido() {
    }

    public CondicionPagoDeUnPedido(long idPedido, long idCondicion) {
        this.idPedido = idPedido;
        this.idCondicion = idCondicion;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCondicionPagoDeUnPedidoDao() : null;
    }

    public long getIdPedido() {
        return idPedido;
    }

    public void setIdPedido(long idPedido) {
        this.idPedido = idPedido;
    }

    public long getIdCondicion() {
        return idCondicion;
    }

    public void setIdCondicion(long idCondicion) {
        this.idCondicion = idCondicion;
    }

    /** To-one relationship, resolved on first access. */
    public CondicionPago getCondicionPago() {
        if (condicionPago__resolvedKey == null || !condicionPago__resolvedKey.equals(idCondicion)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CondicionPagoDao targetDao = daoSession.getCondicionPagoDao();
            condicionPago = targetDao.load(idCondicion);
            condicionPago__resolvedKey = idCondicion;
        }
        return condicionPago;
    }

    public void setCondicionPago(CondicionPago condicionPago) {
        if (condicionPago == null) {
            throw new DaoException("To-one property 'idCondicion' has not-null constraint; cannot set to-one to null");
        }
        this.condicionPago = condicionPago;
        idCondicion = condicionPago.getId();
        condicionPago__resolvedKey = idCondicion;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
