package com.jtristan.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.jtristan.greendao.dao.Pedido;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PEDIDO.
*/
public class PedidoDao extends AbstractDao<Pedido, Long> {

    public static final String TABLENAME = "PEDIDO";

    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NumeroPedido = new Property(1, Long.class, "numeroPedido", false, "NUMERO_PEDIDO");
        public final static Property Cliente = new Property(2, String.class, "cliente", false, "CLIENTE");
        public final static Property Direccion = new Property(3, long.class, "direccion", false, "DIRECCION");
        public final static Property IdCondicionPago = new Property(4, long.class, "idCondicionPago", false, "ID_CONDICION_PAGO");
        public final static Property Finalizado = new Property(5, Boolean.class, "finalizado", false, "FINALIZADO");
        public final static Property FechaCreacion = new Property(6, java.util.Date.class, "fechaCreacion", false, "FECHA_CREACION");
    };

    private DaoSession daoSession;


    public PedidoDao(DaoConfig config) {
        super(config);
    }
    
    public PedidoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'PEDIDO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NUMERO_PEDIDO' INTEGER UNIQUE ," + // 1: numeroPedido
                "'CLIENTE' TEXT NOT NULL ," + // 2: cliente
                "'DIRECCION' INTEGER NOT NULL ," + // 3: direccion
                "'ID_CONDICION_PAGO' INTEGER NOT NULL ," + // 4: idCondicionPago
                "'FINALIZADO' INTEGER," + // 5: finalizado
                "'FECHA_CREACION' INTEGER);"; // 6: fechaCreacion
        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PEDIDO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Pedido entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long numeroPedido = entity.getNumeroPedido();
        if (numeroPedido != null) {
            stmt.bindLong(2, numeroPedido);
        }
        stmt.bindString(3, entity.getCliente());
        stmt.bindLong(4, entity.getDireccion());
        stmt.bindLong(5, entity.getIdCondicionPago());
 
        Boolean finalizado = entity.getFinalizado();
        if (finalizado != null) {
            stmt.bindLong(6, finalizado ? 1l: 0l);
        }
 
        java.util.Date fechaCreacion = entity.getFechaCreacion();
        if (fechaCreacion != null) {
            stmt.bindLong(7, fechaCreacion.getTime());
        }
    }

    @Override
    protected void attachEntity(Pedido entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Pedido readEntity(Cursor cursor, int offset) {
        Pedido entity = new Pedido( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // numeroPedido
            cursor.getString(offset + 2), // cliente
            cursor.getLong(offset + 3), // direccion
            cursor.getLong(offset + 4), // idCondicionPago
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // finalizado
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // fechaCreacion
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Pedido entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNumeroPedido(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCliente(cursor.getString(offset + 2));
        entity.setDireccion(cursor.getLong(offset + 3));
        entity.setIdCondicionPago(cursor.getLong(offset + 4));
        entity.setFinalizado(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setFechaCreacion(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    @Override
    protected Long updateKeyAfterInsert(Pedido entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Pedido entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
