package com.jtristan.greendao.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.jtristan.greendao.dao.Linea;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LINEA.
*/
public class LineaDao extends AbstractDao<Linea, Long> {

    public static final String TABLENAME = "LINEA";

    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_ID");
        public final static Property IdPedido = new Property(1, long.class, "idPedido", false, "ID_PEDIDO");
        public final static Property Material = new Property(2, String.class, "material", false, "MATERIAL");
        public final static Property Cantidad = new Property(3, Integer.class, "cantidad", false, "CANTIDAD");
        public final static Property Precio = new Property(4, Double.class, "precio", false, "PRECIO");
        public final static Property FechaCreacion = new Property(5, java.util.Date.class, "fechaCreacion", false, "FECHA_CREACION");
    };

    private DaoSession daoSession;

    private Query<Linea> pedido_LineasQuery;

    public LineaDao(DaoConfig config) {
        super(config);
    }
    
    public LineaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'LINEA' (" + //
                "'_ID' INTEGER PRIMARY KEY ," + // 0: _id
                "'ID_PEDIDO' INTEGER NOT NULL ," + // 1: idPedido
                "'MATERIAL' TEXT," + // 2: material
                "'CANTIDAD' INTEGER," + // 3: cantidad
                "'PRECIO' REAL," + // 4: precio
                "'FECHA_CREACION' INTEGER);"; // 5: fechaCreacion
        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LINEA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Linea entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getIdPedido());
 
        String material = entity.getMaterial();
        if (material != null) {
            stmt.bindString(3, material);
        }
 
        Integer cantidad = entity.getCantidad();
        if (cantidad != null) {
            stmt.bindLong(4, cantidad);
        }
 
        Double precio = entity.getPrecio();
        if (precio != null) {
            stmt.bindDouble(5, precio);
        }
 
        java.util.Date fechaCreacion = entity.getFechaCreacion();
        if (fechaCreacion != null) {
            stmt.bindLong(6, fechaCreacion.getTime());
        }
    }

    @Override
    protected void attachEntity(Linea entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Linea readEntity(Cursor cursor, int offset) {
        Linea entity = new Linea( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getLong(offset + 1), // idPedido
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // material
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // cantidad
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // precio
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // fechaCreacion
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Linea entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdPedido(cursor.getLong(offset + 1));
        entity.setMaterial(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCantidad(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPrecio(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setFechaCreacion(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    @Override
    protected Long updateKeyAfterInsert(Linea entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Linea entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "Lineas" to-many relationship of Pedido. */
    public synchronized List<Linea> _queryPedido_Lineas(long idPedido) {
        if (pedido_LineasQuery == null) {
            QueryBuilder<Linea> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.IdPedido.eq(idPedido));
            queryBuilder.orderRaw("_ID ASC");
            pedido_LineasQuery = queryBuilder.build();
        } else {
            pedido_LineasQuery.setParameter(0, idPedido);
        }
        return pedido_LineasQuery.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPedidoDao().getAllColumns());
            builder.append(" FROM LINEA T");
            builder.append(" LEFT JOIN PEDIDO T0 ON T.'ID_PEDIDO'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Linea loadCurrentDeep(Cursor cursor, boolean lock) {
        Linea entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Pedido pedido = loadCurrentOther(daoSession.getPedidoDao(), cursor, offset);
         if(pedido != null) {
            entity.setPedido(pedido);
        }

        return entity;    
    }

    public Linea loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Linea> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Linea> list = new ArrayList<Linea>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Linea> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Linea> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
