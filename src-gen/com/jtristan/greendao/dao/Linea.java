package com.jtristan.greendao.dao;

import com.jtristan.greendao.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table LINEA.
 */
public class Linea {

    private Long _id;
    private long idPedido;
    private String material;
    private Integer cantidad;
    private Double precio;
    private java.util.Date fechaCreacion;

    /** Used to resolve relations */
    private DaoSession daoSession;

    /** Used for active entity operations. */
    private LineaDao myDao;

    private Pedido pedido;
    private Long pedido__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Linea() {
    }

    public Linea(Long _id) {
        this._id = _id;
    }

    public Linea(Long _id, long idPedido, String material, Integer cantidad, Double precio, java.util.Date fechaCreacion) {
        this._id = _id;
        this.idPedido = idPedido;
        this.material = material;
        this.cantidad = cantidad;
        this.precio = precio;
        this.fechaCreacion = fechaCreacion;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLineaDao() : null;
    }

    public Long get_id() {
        return _id;
    }

    public void set_id(Long _id) {
        this._id = _id;
    }

    public long getIdPedido() {
        return idPedido;
    }

    public void setIdPedido(long idPedido) {
        this.idPedido = idPedido;
    }

    public String getMaterial() {
        return material;
    }

    public void setMaterial(String material) {
        this.material = material;
    }

    public Integer getCantidad() {
        return cantidad;
    }

    public void setCantidad(Integer cantidad) {
        this.cantidad = cantidad;
    }

    public Double getPrecio() {
        return precio;
    }

    public void setPrecio(Double precio) {
        this.precio = precio;
    }

    public java.util.Date getFechaCreacion() {
        return fechaCreacion;
    }

    public void setFechaCreacion(java.util.Date fechaCreacion) {
        this.fechaCreacion = fechaCreacion;
    }

    /** To-one relationship, resolved on first access. */
    public Pedido getPedido() {
        if (pedido__resolvedKey == null || !pedido__resolvedKey.equals(idPedido)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PedidoDao targetDao = daoSession.getPedidoDao();
            pedido = targetDao.load(idPedido);
            pedido__resolvedKey = idPedido;
        }
        return pedido;
    }

    public void setPedido(Pedido pedido) {
        if (pedido == null) {
            throw new DaoException("To-one property 'idPedido' has not-null constraint; cannot set to-one to null");
        }
        this.pedido = pedido;
        idPedido = pedido.getId();
        pedido__resolvedKey = idPedido;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
